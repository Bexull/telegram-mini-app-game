// Telegram Mini App JavaScript
class NumberGuessingGame {
    constructor() {
        this.secretNumber = this.generateSecretNumber();
        this.attempts = 0;
        this.minRange = 1;
        this.maxRange = 100;
        this.gameEnded = false;
        
        this.initializeTelegramWebApp();
        this.initializeElements();
        this.setupEventListeners();
        this.updateDisplay();
    }

    initializeTelegramWebApp() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
        if (window.Telegram && window.Telegram.WebApp) {
            this.tg = window.Telegram.WebApp;
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
            this.tg.ready();
            this.tg.expand();
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
            this.tg.MainButton.setText("üéÆ –ù–æ–≤–∞—è –∏–≥—Ä–∞");
            this.tg.MainButton.onClick(() => {
                this.startNewGame();
            });
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
            this.tg.BackButton.onClick(() => {
                this.tg.close();
            });
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã
            this.tg.onEvent('themeChanged', () => {
                this.updateTheme();
            });
        }
    }

    initializeElements() {
        this.guessInput = document.getElementById('guess-input');
        this.guessButton = document.getElementById('guess-button');
        this.newGameButton = document.getElementById('new-game-button');
        this.hintButton = document.getElementById('hint-button');
        this.attemptsCount = document.getElementById('attempts-count');
        this.rangeDisplay = document.getElementById('range-display');
        this.resultMessage = document.getElementById('result-message');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã
        if (!this.guessInput || !this.guessButton || !this.newGameButton || !this.hintButton) {
            console.error('–ù–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã!');
            return;
        }
        
        console.log('–í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ');
    }

    setupEventListeners() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Å–ª—É—à–∞—Ç–µ–ª–µ–π
        if (this.guessButton) {
            this.guessButton.addEventListener('click', (e) => {
                e.preventDefault();
                console.log('–ö–Ω–æ–ø–∫–∞ "–£–≥–∞–¥–∞—Ç—å" –Ω–∞–∂–∞—Ç–∞');
                this.makeGuess();
            });
        }
        
        if (this.newGameButton) {
            this.newGameButton.addEventListener('click', (e) => {
                e.preventDefault();
                console.log('–ö–Ω–æ–ø–∫–∞ "–ù–æ–≤–∞—è –∏–≥—Ä–∞" –Ω–∞–∂–∞—Ç–∞');
                this.startNewGame();
            });
        }
        
        if (this.hintButton) {
            this.hintButton.addEventListener('click', (e) => {
                e.preventDefault();
                console.log('–ö–Ω–æ–ø–∫–∞ "–ü–æ–¥—Å–∫–∞–∑–∫–∞" –Ω–∞–∂–∞—Ç–∞');
                this.showHint();
            });
        }
        
        if (this.guessInput) {
            this.guessInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    console.log('Enter –Ω–∞–∂–∞—Ç –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞');
                    this.makeGuess();
                }
            });

            this.guessInput.addEventListener('input', () => {
                this.validateInput();
            });
        }
        
        console.log('–°–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    }

    generateSecretNumber() {
        return Math.floor(Math.random() * 100) + 1;
    }

    validateInput() {
        const value = parseInt(this.guessInput.value);
        const isValid = value >= this.minRange && value <= this.maxRange;
        
        this.guessButton.disabled = !isValid || this.gameEnded;
        
        if (this.guessInput.value && !isValid) {
            this.guessInput.style.borderColor = '#dc3545';
        } else {
            this.guessInput.style.borderColor = '';
        }
    }

    makeGuess() {
        if (this.gameEnded) return;

        const guess = parseInt(this.guessInput.value);
        
        if (isNaN(guess) || guess < this.minRange || guess > this.maxRange) {
            this.showResult('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç ' + this.minRange + ' –¥–æ ' + this.maxRange + '!', 'error');
            this.shakeInput();
            return;
        }

        this.attempts++;
        this.updateDisplay();

        if (guess === this.secretNumber) {
            this.gameWon();
        } else if (guess < this.secretNumber) {
            this.minRange = guess + 1;
            this.showResult(`üìà –ë–æ–ª—å—à–µ! –ü–æ–ø—ã—Ç–∫–∞ #${this.attempts}`, 'hint');
        } else {
            this.maxRange = guess - 1;
            this.showResult(`üìâ –ú–µ–Ω—å—à–µ! –ü–æ–ø—ã—Ç–∫–∞ #${this.attempts}`, 'hint');
        }

        this.guessInput.value = '';
        this.validateInput();
    }

    gameWon() {
        this.gameEnded = true;
        const message = `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã —É–≥–∞–¥–∞–ª —á–∏—Å–ª–æ ${this.secretNumber}!\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫: ${this.attempts}`;
        this.showResult(message, 'success');
        
        // –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ –ø–æ–±–µ–¥–µ
        if (this.tg && this.tg.HapticFeedback) {
            this.tg.HapticFeedback.notificationOccurred('success');
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ Telegram
        if (this.tg) {
            this.tg.MainButton.setText("üéÆ –ù–æ–≤–∞—è –∏–≥—Ä–∞");
            this.tg.MainButton.show();
        }
    }

    startNewGame() {
        this.secretNumber = this.generateSecretNumber();
        this.attempts = 0;
        this.minRange = 1;
        this.maxRange = 100;
        this.gameEnded = false;
        
        this.guessInput.value = '';
        this.showResult('üéØ –ù–æ–≤–∞—è –∏–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100.', 'hint');
        this.updateDisplay();
        this.validateInput();
        
        // –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ –Ω–æ–≤–æ–π –∏–≥—Ä–µ
        if (this.tg && this.tg.HapticFeedback) {
            this.tg.HapticFeedback.impactOccurred('light');
        }
    }

    showHint() {
        if (this.gameEnded) return;
        
        const hint = this.generateHint();
        this.showResult(hint, 'hint');
        
        // –í–∏–±—Ä–∞—Ü–∏—è –ø—Ä–∏ –ø–æ–¥—Å–∫–∞–∑–∫–µ
        if (this.tg && this.tg.HapticFeedback) {
            this.tg.HapticFeedback.impactOccurred('medium');
        }
    }

    generateHint() {
        const hints = [
            `üí° –ß–∏—Å–ª–æ ${this.secretNumber > 50 ? '–±–æ–ª—å—à–µ' : '–º–µ–Ω—å—à–µ'} 50`,
            `üí° –ß–∏—Å–ª–æ ${this.secretNumber % 2 === 0 ? '—á–µ—Ç–Ω–æ–µ' : '–Ω–µ—á–µ—Ç–Ω–æ–µ'}`,
            `üí° –°—É–º–º–∞ —Ü–∏—Ñ—Ä: ${this.getDigitSum(this.secretNumber)}`,
            `üí° –ß–∏—Å–ª–æ ${this.secretNumber > 75 ? '–±–æ–ª—å—à–µ' : this.secretNumber < 25 ? '–º–µ–Ω—å—à–µ' : '–º–µ–∂–¥—É'} 25 –∏ 75`
        ];
        
        return hints[Math.floor(Math.random() * hints.length)];
    }

    getDigitSum(number) {
        return number.toString().split('').reduce((sum, digit) => sum + parseInt(digit), 0);
    }

    showResult(message, type) {
        this.resultMessage.textContent = message;
        this.resultMessage.className = `result-message ${type}`;
        
        // –ê–Ω–∏–º–∞—Ü–∏—è
        this.resultMessage.classList.add('pulse');
        setTimeout(() => {
            this.resultMessage.classList.remove('pulse');
        }, 300);
    }

    shakeInput() {
        this.guessInput.classList.add('shake');
        setTimeout(() => {
            this.guessInput.classList.remove('shake');
        }, 500);
    }

    updateDisplay() {
        this.attemptsCount.textContent = this.attempts;
        this.rangeDisplay.textContent = `${this.minRange} - ${this.maxRange}`;
    }

    updateTheme() {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–º—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        document.body.style.background = this.tg.themeParams.bg_color || '#ffffff';
        document.body.style.color = this.tg.themeParams.text_color || '#000000';
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    console.log('DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä—É...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const requiredElements = ['guess-input', 'guess-button', 'new-game-button', 'hint-button'];
    const missingElements = requiredElements.filter(id => !document.getElementById(id));
    
    if (missingElements.length > 0) {
        console.error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —ç–ª–µ–º–µ–Ω—Ç—ã:', missingElements);
    } else {
        console.log('–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã');
    }
    
    try {
        new NumberGuessingGame();
        console.log('–ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–≥—Ä—ã:', error);
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —ç–∫—Ä–∞–Ω–∞
window.addEventListener('resize', () => {
    if (window.Telegram && window.Telegram.WebApp) {
        window.Telegram.WebApp.expand();
    }
});
